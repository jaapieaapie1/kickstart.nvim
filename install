#!/bin/bash

# A script to install Neovim and the kickstart.nvim configuration.
# This script is designed to be idempotent and should work on
# Debian/Ubuntu, Fedora, and Arch Linux.

set -e # Exit immediately if a command exits with a non-zero status.
set -o pipefail # Return the exit status of the last command in the pipe that failed.
set -u # Treat unset variables as an error.

# --- Helper Functions ---

# Function to check if a command exists.
command_exists() {
  command -v "$1" >/dev/null 2>&1
}

# Function to print an informational message.
msg() {
  echo -e "\n\e[32m[INFO]\e[0m $1"
}

# Function to print a warning message.
warn() {
  echo -e "\n\e[33m[WARNING]\e[0m $1"
}

# Function to print an error message and exit.
err() {
  echo -e "\n\e[31m[ERROR]\e[0m $1"
  exit 1
}

# --- Dependency Installation ---

# Function to install dependencies based on the package manager.
install_dependencies() {
  local pkgs=("$@")
  local pkg_manager=""

  if command_exists apt-get; then
    pkg_manager="sudo apt-get install -y"
  elif command_exists dnf; then
    pkg_manager="sudo dnf install -y"
  elif command_exists pacman; then
    pkg_manager="sudo pacman -S --noconfirm --needed"
  else
    err "Unsupported package manager. Please install dependencies manually."
  fi

  msg "Installing dependencies with $pkg_manager..."
  $pkg_manager "${pkgs[@]}"
}

# --- Main Installation Logic ---

main() {
  # --- Check for OS and Install Dependencies ---
  local dependencies=("git" "make" "gcc" "ripgrep" "unzip")

  if [[ "$(uname)" == "Linux" ]]; then
    if command_exists apt-get; then
      dependencies+=("fd-find" "xclip")
    elif command_exists dnf; then
      dependencies+=("fd-find" "xclip")
    elif command_exists pacman; then
      dependencies+=("fd" "xclip")
    fi
  elif [[ "$(uname)" == "Darwin" ]]; then # macOS
    if ! command_exists brew; then
      err "Homebrew not found. Please install Homebrew first: https://brew.sh/"
    fi
    dependencies+=("fd" "reattach-to-user-namespace")
  else
    err "Unsupported operating system. This script supports Linux and macOS."
  fi

  install_dependencies "${dependencies[@]}"

  # --- Install Neovim ---
  if ! command_exists nvim; then
    msg "Installing Neovim..."
    if [[ "$(uname)" == "Linux" ]]; then
      if command_exists apt-get; then
        sudo add-apt-repository ppa:neovim-ppa/unstable -y
        sudo apt-get update
        sudo apt-get install -y neovim
      elif command_exists dnf; then
        sudo dnf install -y neovim
      elif command_exists pacman; then
        sudo pacman -S --noconfirm --needed neovim
      fi
    elif [[ "$(uname)" == "Darwin" ]]; then
      brew install neovim
    fi
  else
    msg "Neovim is already installed."
  fi

  # --- Clone kickstart.nvim ---
  local nvim_config_dir="${XDG_CONFIG_HOME:-$HOME/.config}/nvim"

  if [ -d "$nvim_config_dir" ]; then
    warn "Neovim configuration directory already exists at $nvim_config_dir."
    read -p "Do you want to back it up and continue? (y/n) " -n 1 -r
    echo
    if [[ $REPLY =~ ^[Yy]$ ]]; then
      local backup_dir="$nvim_config_dir.bak.$(date +%s)"
      msg "Backing up existing configuration to $backup_dir..."
      mv "$nvim_config_dir" "$backup_dir"
    else
      err "Installation aborted by user."
    fi
  fi

  msg "Cloning kickstart.nvim..."
  git clone https://github.com/nvim-lua/kickstart.nvim.git "$nvim_config_dir"

  # --- Nerd Font Installation ---
  msg "Nerd Font Installation:"
  echo "For icons to display correctly, you need to install a Nerd Font."
  echo "1. Visit: https://www.nerdfonts.com/font-downloads"
  echo "2. Download a font of your choice."
  echo "3. Install the font on your system."
  echo "4. Configure your terminal to use the new font."

  msg "Installation complete! Start Neovim with 'nvim'."
}

# --- Run the main function ---
main
